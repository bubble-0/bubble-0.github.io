(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{436:function(a,t,s){"use strict";s.r(t);var r=s(17),_=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"查看shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看shell"}},[a._v("#")]),a._v(" 查看shell")]),a._v(" "),s("ul",[s("li",[a._v("** cat /etc/shells  查看当前系统所支持的shell")]),a._v(" "),s("li",[a._v("** echo $SHELL 当前 Linux 的默认 Shell")]),a._v(" "),s("li",[a._v("** 现代 Linux系统在启动时会自动创建几个虚拟控制台（Virtual Console），其中一个供图形桌面程序使用，其他的保留原生控制台的样子，")]),a._v(" "),s("li",[a._v("** 按下快捷键Ctrl + Alt + Fn(n=2,3,4,5,6)可以从图形界面模式切换到控制台模式，按下Ctrl + Alt +F1可以从控制台模式再切换回图形界面模式。")])]),a._v(" "),s("h3",{attrs:{id:"查看当前用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看当前用户"}},[a._v("#")]),a._v(" 查看当前用户")]),a._v(" "),s("p",[a._v("whoami")]),a._v(" "),s("h3",{attrs:{id:"创建用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建用户"}},[a._v("#")]),a._v(" 创建用户")]),a._v(" "),s("p",[a._v("useradd -m 用户账号")]),a._v(" "),s("h3",{attrs:{id:"删除用户"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除用户"}},[a._v("#")]),a._v(" 删除用户")]),a._v(" "),s("p",[a._v("userdel -r 用户名")]),a._v(" "),s("h3",{attrs:{id:"用户密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户密码"}},[a._v("#")]),a._v(" 用户密码")]),a._v(" "),s("p",[a._v("passwd 用户名\n超级用户可以使用passwd命令为普通用户设置或修改用户口令。\n用户也可以直接使用该命令来修改自己的口令，而无需在命令后面使用用户名。")]),a._v(" "),s("h3",{attrs:{id:"添加、删除组账号："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加、删除组账号："}},[a._v("#")]),a._v(" 添加、删除组账号：")]),a._v(" "),s("p",[a._v("groupadd、groupdel")]),a._v(" "),s("h3",{attrs:{id:"修改用户所在组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改用户所在组"}},[a._v("#")]),a._v(" 修改用户所在组")]),a._v(" "),s("p",[a._v("usermod -g 目标用户组 用户名")]),a._v(" "),s("h3",{attrs:{id:"压缩文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩文件"}},[a._v("#")]),a._v(" 压缩文件")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("** zip包\nzip 文件名.zip 文件1 文件2")])]),a._v(" "),s("li",[s("p",[a._v("** tar命令\ntar -x   解压\n-c   压缩\n-z   gzip属性\n-j   bzip属性\nvf   f为必须\n压缩后的文件名字    压缩的文件1  2  3"),s("br"),a._v("\ntar -czvf  文件.gzip  文件\ntar -xzvf  文件.gzip\ntar -cjvf  文件.jzip  文件\ntar -xjvf  文件.jzip")])])]),a._v(" "),s("h3",{attrs:{id:"文件目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件目录"}},[a._v("#")]),a._v(" 文件目录")]),a._v(" "),s("p",[a._v("每个目录下都有“.”“..”这样的两个隐藏文件，“.”表示本文件，“..”表示父目录\n• -：普通文件"),s("br"),a._v("\n• d: 目录文件\n• b: 块设备\n• c: 字符设备\n• l: 符号链接文件"),s("br"),a._v("\n• p: 管道文件pipe\n• s: 套接字文件sock")]),a._v(" "),s("p",[a._v("列出非目录的文件项，然后是每一个目录中的“可显示”文件\nls\n-a 显示所有文件，包含隐藏文件\n-A 显示所有文件，包含隐藏文件，但不包含.及..\n-l 显示为long format（长格式），列出文件的类型、权限、链接数、owner、group、大 小，时间，名字\n-U 按存放顺序排序显示\n-S 以文件大小排序显示，默认从大到小 -r后，从小到大")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("** 环境变量\n显示所有的环境变量\nenv")])]),a._v(" "),s("li",[s("p",[a._v("** 查看环境变量PATH值\nexport")])]),a._v(" "),s("li",[s("p",[a._v("** 使环境变量立即生效\nsource .bash_profile")])]),a._v(" "),s("li",[s("p",[a._v("** 单独查看某环境变量\necho $XXX XXX环境变量")])]),a._v(" "),s("li",[s("p",[a._v("** 设置一个新的环境变量\nexport 环境变量名称=XXX\n环境变量名称=XXX")])]),a._v(" "),s("li",[s("p",[a._v("** 查看本地shell变量\nset\nunset 清除环境变量\nunset $TEST #删除环境变量TEST")])])]),a._v(" "),s("p",[a._v("readonly命令设置只读变量\nexport HELLO=hello\nreadonly HELLO")]),a._v(" "),s("h3",{attrs:{id:"_1-linux的变量种类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-linux的变量种类"}},[a._v("#")]),a._v(" 1.Linux的变量种类")]),a._v(" "),s("h4",{attrs:{id:"按变量的生存周期来划分，linux变量可分为两类："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按变量的生存周期来划分，linux变量可分为两类："}},[a._v("#")]),a._v(" 按变量的生存周期来划分，Linux变量可分为两类：")]),a._v(" "),s("ul",[s("li",[a._v("** 1.1 永久的：需要修改配置文件，变量永久生效。")]),a._v(" "),s("li",[a._v("** 1.2 临时的：使用export命令声明即可，变量在关闭shell时失效。")])]),a._v(" "),s("h4",{attrs:{id:"_2-设置变量的三种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-设置变量的三种方法"}},[a._v("#")]),a._v(" 2.设置变量的三种方法")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("** 2.1 在/etc/profile文件中添加变量【对所有用户生效(永久的)】\n用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。\n例如：编辑/etc/profile文件，添加CLASSPATH变量\nvi /etc/profile\nexport CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib\n注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。")])]),a._v(" "),s("li",[s("p",[a._v("** 2.2 在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】\n用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。\n例如：编辑guok用户目录(/home/guok)下的.bash_profile\n$ vi /home/guok/.bash.profile\n添加如下内容：\nexport CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib\n注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。")])]),a._v(" "),s("li",[s("p",[a._v("** 2.3 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】\n在shell的命令行下直接使用[export 变量名=变量值] 定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，\nshell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。")])])]),a._v(" "),s("h3",{attrs:{id:"linux查看cpu内核信息命令："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux查看cpu内核信息命令："}},[a._v("#")]),a._v(" linux查看CPU内核信息命令：")]),a._v(" "),s("p",[a._v("cat /proc/cpuinfo")]),a._v(" "),s("h3",{attrs:{id:"查看内核信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看内核信息"}},[a._v("#")]),a._v(" 查看内核信息")]),a._v(" "),s("ul",[s("li",[a._v("** cat /proc/version")])]),a._v(" "),s("h3",{attrs:{id:"查看自带的jdk的相关信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看自带的jdk的相关信息"}},[a._v("#")]),a._v(" 查看自带的JDK的相关信息")]),a._v(" "),s("ul",[s("li",[a._v("** rpm -qa | grep gcj")])]),a._v(" "),s("h3",{attrs:{id:"删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[a._v("#")]),a._v(" 删除")]),a._v(" "),s("ul",[s("li",[a._v("** rpm -e --nodeps\njava-1.4.2-gcj-compat-1.4.2.0-40jpp.115")])]),a._v(" "),s("h3",{attrs:{id:"卸载openjdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#卸载openjdk"}},[a._v("#")]),a._v(" 卸载openjdk")]),a._v(" "),s("h4",{attrs:{id:"_1-查看openjdk的包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-查看openjdk的包"}},[a._v("#")]),a._v(" 1) 查看openjdk的包")]),a._v(" "),s("ul",[s("li",[a._v("** rpm -qa | grep openjdk")]),a._v(" "),s("li",[a._v("** rpm -qa | grep java")])]),a._v(" "),s("h4",{attrs:{id:"_2）卸载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2）卸载"}},[a._v("#")]),a._v(" 2）卸载")]),a._v(" "),s("ul",[s("li",[a._v("** rpm -qa| grep openjdk|xargs rpm -e --nodeps")]),a._v(" "),s("li",[a._v("** rpm -e --nodeps java-"),s("em",[a._v("-gcj-")]),a._v(".x86_64")])]),a._v(" "),s("h3",{attrs:{id:"配置jdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置jdk"}},[a._v("#")]),a._v(" 配置jdk")]),a._v(" "),s("p",[a._v("/etc/profile\nJAVA_HOME=/usr/share/jdk1.5.0_05\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n重新登录即可。")]),a._v(" "),s("h3",{attrs:{id:"查看磁盘空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看磁盘空间"}},[a._v("#")]),a._v(" 查看磁盘空间")]),a._v(" "),s("h3",{attrs:{id:"关机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关机"}},[a._v("#")]),a._v(" 关机")]),a._v(" "),s("ul",[s("li",[a._v("** shutdown -h now  #立刻关机重启，工作中常用")]),a._v(" "),s("li",[a._v("** shutdown -h +1    #1分钟后关机")])]),a._v(" "),s("h3",{attrs:{id:"重启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重启"}},[a._v("#")]),a._v(" 重启")]),a._v(" "),s("ul",[s("li",[a._v("** reboot　　　　　　#工作中常用")]),a._v(" "),s("li",[a._v("** shutdown -r now      #工作中常用")])]),a._v(" "),s("h3",{attrs:{id:"日期相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日期相关"}},[a._v("#")]),a._v(" 日期相关")]),a._v(" "),s("ul",[s("li",[a._v("** date命令：查看当前时间")]),a._v(" "),s("li",[a._v("** date -s  完整日期时间（YYYY-MM-DD hh:mm[:ss]）：修改日期、时间")]),a._v(" "),s("li",[a._v("** hwclock -w 将时间写入bios避免重启失效。当我们进行完 Linux 时间的校时后，还需要以 hwclock 来更新 BIOS 的时间，因为每次重新启动的时候，系统会重新由 BIOS 将时间读出来，所以， BIOS 才是重要的时间依据吶。")])]),a._v(" "),s("h3",{attrs:{id:"查看防火墙状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看防火墙状态"}},[a._v("#")]),a._v(" 查看防火墙状态")]),a._v(" "),s("ul",[s("li",[a._v("** systemctl status firewalld")])]),a._v(" "),s("h3",{attrs:{id:"关闭防火墙"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭防火墙"}},[a._v("#")]),a._v(" 关闭防火墙")]),a._v(" "),s("ul",[s("li",[a._v("** systemctl stop firewalld")])]),a._v(" "),s("h3",{attrs:{id:"打开防火墙"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打开防火墙"}},[a._v("#")]),a._v(" 打开防火墙")]),a._v(" "),s("ul",[s("li",[a._v("** systemctl start firewalld")])]),a._v(" "),s("h3",{attrs:{id:"永久关闭防火墙"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#永久关闭防火墙"}},[a._v("#")]),a._v(" 永久关闭防火墙")]),a._v(" "),s("ul",[s("li",[a._v("** systemctl disable firewalld")])]),a._v(" "),s("h3",{attrs:{id:"查看已经开放的端口："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看已经开放的端口："}},[a._v("#")]),a._v(" 查看已经开放的端口：")]),a._v(" "),s("ul",[s("li",[a._v("** firewall-cmd --list-ports")])]),a._v(" "),s("h3",{attrs:{id:"开启端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开启端口"}},[a._v("#")]),a._v(" 开启端口")]),a._v(" "),s("ul",[s("li",[a._v("** firewall-cmd --zone=public --add-port=80/tcp --permanent"),s("br"),a._v("\n命令含义：\n–zone #作用域\n–add-port=80/tcp #添加端口，格式为：端口/通讯协议\n–permanent #永久生效，没有此参数重启后失效")])]),a._v(" "),s("h3",{attrs:{id:"关闭端口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭端口"}},[a._v("#")]),a._v(" 关闭端口")]),a._v(" "),s("p",[a._v("-** firewall-cmd --remove-port=3306/udp --permanent")]),a._v(" "),s("h3",{attrs:{id:"重新加载防火墙"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新加载防火墙"}},[a._v("#")]),a._v(" 重新加载防火墙")]),a._v(" "),s("p",[a._v("firewall-cmd --reload")]),a._v(" "),s("h3",{attrs:{id:"关闭防火墙及自启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭防火墙及自启动"}},[a._v("#")]),a._v(" 关闭防火墙及自启动")]),a._v(" "),s("p",[a._v("service iptables stop\nchkconfig iptables off")]),a._v(" "),s("h3",{attrs:{id:"ssh免密登录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh免密登录"}},[a._v("#")]),a._v(" ssh免密登录")]),a._v(" "),s("h4",{attrs:{id:"在主节点上生成无密码的密钥对"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在主节点上生成无密码的密钥对"}},[a._v("#")]),a._v(" 在主节点上生成无密码的密钥对")]),a._v(" "),s("ul",[s("li",[a._v("** ssh-keygen -t rsa")]),a._v(" "),s("li",[a._v("** 一路回车")])]),a._v(" "),s("h4",{attrs:{id:"查看系统生成的公钥私钥对"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看系统生成的公钥私钥对"}},[a._v("#")]),a._v(" 查看系统生成的公钥私钥对")]),a._v(" "),s("ul",[s("li",[a._v("**ls /root/.ssh")]),a._v(" "),s("li",[a._v("**可以看到如下的文件\n.  ..  id_rsa  id_rsa.pub")])]),a._v(" "),s("h4",{attrs:{id:"将生成的公钥私钥对id-rsa-pub发送到其他的节点上，需要输入yes，再输入其他节点的密码。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将生成的公钥私钥对id-rsa-pub发送到其他的节点上，需要输入yes，再输入其他节点的密码。"}},[a._v("#")]),a._v(" 将生成的公钥私钥对id_rsa.pub发送到其他的节点上，需要输入yes，再输入其他节点的密码。")]),a._v(" "),s("ul",[s("li",[a._v("** ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.30.201")])]),a._v(" "),s("h4",{attrs:{id:"测试："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试："}},[a._v("#")]),a._v(" 测试：")]),a._v(" "),s("ul",[s("li",[a._v("** 在主节点上sshhslave1，正常情况下，不需要密码就能直接登陆进去了。")])]),a._v(" "),s("h3",{attrs:{id:"关于ssh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于ssh"}},[a._v("#")]),a._v(" 关于SSH")]),a._v(" "),s("ul",[s("li",[a._v("** SSH(远程连接工具)连接原理：ssh服务是一个守护进程(demon)，系统后台监听客户端的连接，ssh服务端的进程名为sshd,负责实时监听客户端的请求(IP 22端口)，包括公共秘钥等交换等信息。")]),a._v(" "),s("li",[a._v("** ssh服务端由2部分组成： openssh(提供ssh服务)    openssl(提供加密的程序)")])]),a._v(" "),s("h4",{attrs:{id:"ssh的工作机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh的工作机制"}},[a._v("#")]),a._v(" SSH的工作机制")]),a._v(" "),s("ul",[s("li",[a._v("** 服务器启动的时候自己产生一个密钥(768bit公钥)，本地的ssh客户端发送连接请求到ssh服务器，服务器检查连接点客户端发送的数据和IP地址，确认合法后发送密钥(768bits)给客户端，此时客户端将本地私钥(256bit)和服务器的公钥(768bit)结合成密钥对key(1024bit),发回给服务器端，建立连接通过key-pair数据传输。")]),a._v(" "),s("li",[a._v("**")])]),a._v(" "),s("h3",{attrs:{id:"如果rpm安装软件时提示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果rpm安装软件时提示"}},[a._v("#")]),a._v(" 如果rpm安装软件时提示")]),a._v(" "),s("ul",[s("li",[a._v("** 警告：MySQL-server-5.6.45-1.el6.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY")]),a._v(" "),s("li",[a._v("** 这是由于yum安装了旧版本的GPG keys造成的")]),a._v(" "),s("li",[a._v("** 在命令后面安装 --force --nodeps")])]),a._v(" "),s("h3",{attrs:{id:"rpm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rpm"}},[a._v("#")]),a._v(" RPM")]),a._v(" "),s("ul",[s("li",[a._v("** rpm -e 卸载")]),a._v(" "),s("li",[a._v("** rpm -qa 列出所有安装过的包")]),a._v(" "),s("li",[a._v("**  --force --nodeps  忽略报错强制安装")])]),a._v(" "),s("h3",{attrs:{id:"centos7-查看占用端口进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos7-查看占用端口进程"}},[a._v("#")]),a._v(" centos7 查看占用端口进程")]),a._v(" "),s("p",[a._v("netstat -lnp|grep 8080")]),a._v(" "),s("h3",{attrs:{id:"添加软连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加软连接"}},[a._v("#")]),a._v(" 添加软连接")]),a._v(" "),s("ul",[s("li",[a._v("** ln -s [源文件] [目标文件]")]),a._v(" "),s("li",[a._v("** rm -rf ./链接名 删除的是软链接")]),a._v(" "),s("li",[a._v("** rm -rf ./链接名/ 删除的则是文件和你的软链接")])]),a._v(" "),s("h3",{attrs:{id:"vi命令常用参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vi命令常用参数"}},[a._v("#")]),a._v(" vi命令常用参数")]),a._v(" "),s("ul",[s("li",[a._v("** Ctrl+f：向文件尾翻一屏")]),a._v(" "),s("li",[a._v("** Ctrl＋b；向文件首翻一屏")]),a._v(" "),s("li",[a._v("** gg 跳到第一行，")]),a._v(" "),s("li",[a._v("** G 跳到最后一行；")]),a._v(" "),s("li",[a._v("** dG 清除文件；")]),a._v(" "),s("li",[a._v("** 😒/要替换的字符/要替换成的字符  替换当前行的字符")]),a._v(" "),s("li",[a._v("** :%s/要替换的字符/要替换成的字符 替换当前行的字符")])]),a._v(" "),s("h3",{attrs:{id:"echo命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#echo命令"}},[a._v("#")]),a._v(" echo命令")]),a._v(" "),s("ul",[s("li",[a._v('** 覆盖文件内容 echo "Raspberry" > test.txt')]),a._v(" "),s("li",[a._v('** 追加文件内容 echo "Intel Galileo" >> test.txt')])]),a._v(" "),s("h3",{attrs:{id:"linux中的-和-，-和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux中的-和-，-和"}},[a._v("#")]),a._v(" linux中的&&和&，|和||")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("**  &  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &")])]),a._v(" "),s("li",[s("p",[a._v("** && 表示前一条命令执行成功时，才执行后一条命令 ，如 echo ‘1‘ && echo ‘2’")])]),a._v(" "),s("li",[s("p",[a._v("** | 表示管道，上一条命令的输出，作为下一条命令参数，如 echo ‘yes’ | wc -l")])]),a._v(" "),s("li",[s("p",[a._v("** || 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo “fail”")])])])])}),[],!1,null,null,null);t.default=_.exports}}]);